@page "/try"
@using BlazorMonaco.Editor
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using System.Reflection
@using System.Text
@using static BluehillNuGetPages.Packages
@inject HttpClient Http

<h1>Try</h1>

<p>You can try the following packages on this page:</p>

<ul>
    <li><a href="@Hangul">Bluehill.Hangul</a></li>
    <li><a href="@Deconstructors">Bluehill.Deconstructors</a></li>
    <li><a href="@StringExtensions">Bluehill.StringExtensions</a></li>
</ul>

<h2>Input code</h2>

<p>
    <button class="btn btn-primary" @onclick="hangulExample">Hangul Example</button>
    <button class="btn btn-primary" @onclick="deconstructorsExample">Deconstructors Example</button>
    <button class="btn btn-primary" @onclick="stringExtensionsExample">StringExtensions Example</button>
</p>

<StandaloneCodeEditor @ref="sce" ConstructionOptions="ConstructionOptions"/>
<br/>
<p>
    @if (!isLoading)
    {
        <button class="btn btn-primary" @onclick="runCode">Run</button>
    }
</p>

<h2>Output</h2>

<pre><code>@output?.ToString()</code></pre>

<h2>Error</h2>

<pre><code>@(exception?.ToString() ?? "(No errors.)")</code></pre>

@code {

    static Try()
    {
        // For some unknown reason, this is necessary to make the console output work.
        Console.WriteLine(0);
        Console.WriteLine(true);
    }

    private static readonly StandaloneEditorConstructionOptions Seco = new()
    {
        AutomaticLayout = true,
        Language = "csharp",
        Minimap = new()
        {
            Enabled = false
        },
        ScrollBeyondLastLine = false
    };

    private static Task<IEnumerable<MetadataReference>>? references;
    private StandaloneCodeEditor sce = null!;
    private StringBuilder? output;
    private Exception? exception;
    private bool isLoading;

    private static StandaloneEditorConstructionOptions ConstructionOptions(StandaloneCodeEditor arg) => Seco;

    // ReSharper disable InconsistentNaming
    private async Task<IEnumerable<MetadataReference>> createReferences()
    {
        string[] assemblyNames =
        [
            "System.Runtime",
            "netstandard",
            "System.Console",
            "Bluehill.Hangul",
            "Bluehill.Deconstructors.List",
            "Bluehill.Deconstructors.Version",
            "Bluehill.Deconstructors.DateTime",
            "Bluehill.Deconstructors.Span",
            "Bluehill.StringExtensions"
        ];

        List<MetadataReference> mrs = [];

        foreach (var assemblyName in assemblyNames)
        {
            var stream = await Http.GetStreamAsync($"/ref-assemblies/{assemblyName}.dll");

            mrs.Add(MetadataReference.CreateFromStream(stream));
        }

        return mrs;
    }

    private async Task hangulExample() =>
        await sce.SetValue("""
                           const string cheolsu = "철수";
                           const string gildong = "길동";
                           const char gyul = '귤';

                           Console.WriteLine($"{cheolsu.IGa()} 밥을 먹는다.");
                           Console.WriteLine($"{gildong.EunNeun()} 날쌔다.");
                           Console.WriteLine(gyul.Choseong());

                           """);

    private async Task deconstructorsExample() =>
        await sce.SetValue("""
                           int[] ints = [1, 2, 3, 4, 5];
                           var (one, two, three, four, five) = ints;

                           Console.WriteLine(one);

                           """);

    private async Task stringExtensionsExample() =>
        await sce.SetValue("""
                           const string str = "The Quick Brown Fox Jumps Over The Lazy Dog";

                           Console.WriteLine(str.Left(3));
                           Console.WriteLine(str.Right(3));
                           Console.WriteLine(str.CountOccurrences("The"));
                           Console.WriteLine(str.SplitPart(' ', 5));

                           """);

    private async Task runCode()
    {
        var oldOut = Console.Out;

        try
        {
            isLoading = true;
            output = null;
            exception = null;
            var value = await sce.GetValue();

            if (string.IsNullOrWhiteSpace(value))
            {
                return;
            }

            references ??= createReferences();

            var st = CSharpSyntaxTree.ParseText($$"""
                                                using Bluehill;
                                                using Bluehill.Hangul;
                                                using Bluehill.Deconstructors;
                                                using System;
                                                using System.Collections.Generic;
                                                using System.Threading;
                                                using System.Threading.Tasks;

                                                [assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

                                                public static class BHProgram {
                                                    public static Task<Exception?> EntryPoint(CancellationToken token) {
                                                        TaskCompletionSource<Exception?> tcs = new();

                                                        Task.Run(async () => {
                                                            while (!token.IsCancellationRequested) {
                                                                await Task.Delay(100);
                                                            }

                                                            tcs.TrySetCanceled(token);
                                                        }, token);

                                                        Task.Run(() => UserInput(tcs), token);

                                                        return tcs.Task;

                                                        static void UserInput(TaskCompletionSource<Exception?> tcs) {
                                                            try {
                                                                {{value}}
                                                            } catch (Exception e) {
                                                                tcs.TrySetResult(e);

                                                                return;
                                                            }

                                                            tcs.TrySetResult(null);
                                                        }
                                                    }
                                                }
                                                """,
                CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.Preview));
            var c = CSharpCompilation.Create(Guid.NewGuid().ToString("N"), [st], await references, new(OutputKind.DynamicallyLinkedLibrary, nullableContextOptions: NullableContextOptions.Enable));
            await using MemoryStream ms = new();
            var er = c.Emit(ms);

            if (!er.Success)
            {
                exception = new InvalidOperationException(string.Join("\n", er.Diagnostics.Select(d => $"{d.Id}: {d.GetMessage()}")));

                return;
            }

            ms.Seek(0, SeekOrigin.Begin);

            var asm = Assembly.Load(ms.ToArray());
            var bhProgramType = asm.GetType("BHProgram");

            if (bhProgramType is null)
            {
                exception = new InvalidOperationException("Could not find BHProgram type.");

                return;
            }

            var entryPoint = bhProgramType.GetMethod("EntryPoint", BindingFlags.Public | BindingFlags.Static);

            if (entryPoint is null)
            {
                exception = new InvalidOperationException("Could not find EntryPoint method.");

                return;
            }

            await using StringWriter sw = new();
            output = sw.GetStringBuilder();

            Console.SetOut(sw);

            using CancellationTokenSource cts = new(TimeSpan.FromSeconds(10));

            try
            {
                exception = await (Task<Exception?>)entryPoint.Invoke(null, [cts.Token])!;
            }
            catch (OperationCanceledException oce) when (cts.IsCancellationRequested)
            {
                exception = new InvalidOperationException("Timed out.", oce);
            }
        }
        finally
        {
            Console.SetOut(oldOut);

            isLoading = false;
        }
    }

}
